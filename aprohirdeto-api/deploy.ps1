# Mini Apr√≥hirdet≈ë API Deployment Script (Windows PowerShell)
# Haszn√°lat: .\deploy.ps1 [k√∂rnyezet]

param(
    [string]$Environment = "production"
)

$ProjectName = "aprohirdeto-api"
$ImageName = "$ProjectName:latest"

Write-Host "============================================" -ForegroundColor Cyan
Write-Host "  Mini Apr√≥hirdet≈ë API Deployment" -ForegroundColor Cyan
Write-Host "  K√∂rnyezet: $Environment" -ForegroundColor Cyan
Write-Host "============================================" -ForegroundColor Cyan

function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Green
}

function Write-Warn {
    param([string]$Message)
    Write-Host "[WARN] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# Docker ellen≈ërz√©se
try {
    $dockerVersion = docker --version
    Write-Info "Docker verzi√≥: $dockerVersion"
} catch {
    Write-Error "Docker nincs telep√≠tve vagy nem fut!"
    exit 1
}

# R√©gi kont√©nerek le√°ll√≠t√°sa
Write-Info "R√©gi kont√©nerek le√°ll√≠t√°sa..."
try {
    docker-compose down --remove-orphans
} catch {
    Write-Warn "Nincs fut√≥ kont√©ner."
}

# Docker image √©p√≠t√©se
Write-Info "Docker image √©p√≠t√©se..."
docker build -t $ImageName .

if ($LASTEXITCODE -ne 0) {
    Write-Error "Docker build sikertelen!"
    exit 1
}

# K√∂rnyezeti v√°ltoz√≥k ellen≈ërz√©se
if (!(Test-Path ".env")) {
    Write-Warn ".env f√°jl nem tal√°lhat√≥!"
    if (Test-Path ".env.example") {
        Copy-Item ".env.example" ".env"
        Write-Info ".env.example -> .env m√°solva. K√©rlek, t√∂ltsd ki a megfelel≈ë √©rt√©kekkel!"
        exit 1
    }
}

# Kont√©ner ind√≠t√°sa
Write-Info "Alkalmaz√°s ind√≠t√°sa..."
docker-compose up -d

if ($LASTEXITCODE -ne 0) {
    Write-Error "Kont√©ner ind√≠t√°s sikertelen!"
    exit 1
}

# Health check
Write-Info "Health check v√©grehajt√°sa..."
Start-Sleep -Seconds 10

$healthUrl = "http://localhost:3000/api/health"
$maxAttempts = 30

for ($i = 1; $i -le $maxAttempts; $i++) {
    try {
        $response = Invoke-WebRequest -Uri $healthUrl -UseBasicParsing -TimeoutSec 5
        if ($response.StatusCode -eq 200) {
            Write-Info "‚úÖ Alkalmaz√°s sikeresen elindult!"
            Write-Info "üîó API el√©rhet≈ë: http://localhost:3000"
            Write-Info "üîó Health check: $healthUrl"
            break
        }
    } catch {
        if ($i -eq $maxAttempts) {
            Write-Error "‚ùå Alkalmaz√°s nem indult el 5 perc alatt!"
            docker-compose logs
            exit 1
        }
        Write-Info "V√°rakoz√°s az alkalmaz√°s indul√°s√°ra... ($i/$maxAttempts)"
        Start-Sleep -Seconds 10
    }
}

# Logok megjelen√≠t√©se
Write-Info "Utols√≥ 20 sor a logokb√≥l:"
docker-compose logs --tail=20

Write-Host "============================================" -ForegroundColor Green
Write-Host "  Deployment befejezve!" -ForegroundColor Green
Write-Host "  Logok megtekint√©se: docker-compose logs -f" -ForegroundColor Green
Write-Host "  Le√°ll√≠t√°s: docker-compose down" -ForegroundColor Green
Write-Host "============================================" -ForegroundColor Green
