// DOM elemek referenci√°i
const adForm = document.getElementById('ad-form');
const gallery = document.getElementById('gallery');
const submitBtn = document.getElementById('submit-btn');
const errorMessage = document.getElementById('error-message');
const successMessage = document.getElementById('success-message');

// Hiba√ºzenet megjelen√≠t√©se
function showError(message) {
    errorMessage.textContent = message;
    errorMessage.style.display = 'block';
    successMessage.style.display = 'none';
    
    // Automatikus elrejt√©s 5 m√°sodperc ut√°n
    setTimeout(() => {
        errorMessage.style.display = 'none';
    }, 5000);
}

// Sikeres √ºzenet megjelen√≠t√©se
function showSuccess(message) {
    successMessage.textContent = message;
    successMessage.style.display = 'block';
    errorMessage.style.display = 'none';
    
    // Automatikus elrejt√©s 3 m√°sodperc ut√°n
    setTimeout(() => {
        successMessage.style.display = 'none';
    }, 3000);
}

// Hirdet√©sek bet√∂lt√©se a szerverr≈ël
async function loadAds() {
    try {
        console.log('Hirdet√©sek bet√∂lt√©se...');
        
        const response = await fetch('/api/ads');
        
        if (!response.ok) {
            throw new Error(`HTTP hiba: ${response.status} - ${response.statusText}`);
        }
        
        const ads = await response.json();
        console.log('Bet√∂lt√∂tt hirdet√©sek:', ads);
        
        renderAds(ads);
        
    } catch (error) {
        console.error('Hiba a hirdet√©sek bet√∂lt√©sekor:', error);
        gallery.innerHTML = `
            <div class="no-ads">
                ‚ùå Hiba t√∂rt√©nt a hirdet√©sek bet√∂lt√©sekor: ${error.message}
            </div>
        `;
    }
}

// Hirdet√©sek megjelen√≠t√©se a gal√©ria ter√ºleten
function renderAds(ads) {
    if (!ads || ads.length === 0) {
        gallery.innerHTML = `
            <div class="no-ads">
                üì≠ M√©g nincsenek hirdet√©sek. Legyen √ñn az els≈ë!
            </div>
        `;
        return;
    }
    
    const adsHtml = ads.map(ad => {
        // K√©p URL kezel√©se
        let imageHtml = '';
        if (ad.thumbnail_url) {
            // Ha van thumbnail_url, azt haszn√°ljuk
            const imageUrl = `https://beadando-kepek-w4pp9o.s3.eu-central-1.amazonaws.com/${ad.thumbnail_url}`;
            imageHtml = `<img src="${imageUrl}" alt="${ad.ad_title}" class="ad-image" 
                              onError="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                         <div class="ad-image" style="display:none; align-items:center; justify-content:center; background-color:#f0f0f0; color:#666;">
                            üñºÔ∏è K√©p nem el√©rhet≈ë
                         </div>`;
        } else {
            // Ha nincs k√©p, placeholder megjelen√≠t√©se
            imageHtml = `
                <div class="ad-image" style="display:flex; align-items:center; justify-content:center; background-color:#f0f0f0; color:#666;">
                    üì∑ Nincs k√©p
                </div>
            `;
        }
        
        return `
            <div class="ad-card">
                ${imageHtml}
                <div class="ad-content">
                    <div class="ad-title">${escapeHtml(ad.ad_title || 'N√©vtelen hirdet√©s')}</div>
                    ${ad.price ? `<div class="ad-price">${escapeHtml(ad.price)}</div>` : ''}
                    <div class="ad-seller">üë§ ${escapeHtml(ad.seller_name || 'N√©vtelen elad√≥')}</div>
                    <div class="ad-actions">
                        <button class="btn-small btn-edit" onclick="editAd(${ad.id})">
                            ‚úèÔ∏è Szerkeszt√©s
                        </button>
                        <button class="btn-small btn-delete" onclick="deleteAd(${ad.id}, '${escapeHtml(ad.ad_title)}')">
                            üóëÔ∏è T√∂rl√©s
                        </button>
                    </div>
                </div>
            </div>
        `;
    }).join('');
    
    gallery.innerHTML = adsHtml;
}

// HTML escape seg√©df√ºggv√©ny (XSS v√©delem)
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// ≈∞rlap submit esem√©nykezel≈ë
adForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
        // Gomb letilt√°sa √©s bet√∂lt≈ë √°llapot
        submitBtn.disabled = true;
        submitBtn.textContent = '‚è≥ Felt√∂lt√©s...';
        
        // Hiba√ºzenetek elrejt√©se
        errorMessage.style.display = 'none';
        successMessage.style.display = 'none';
        
        // FormData objektum l√©trehoz√°sa
        const formData = new FormData(adForm);
        
        // K√∂telez≈ë mez≈ëk ellen≈ërz√©se
        const adTitle = formData.get('ad_title');
        const sellerName = formData.get('seller_name');
        
        if (!adTitle || !adTitle.trim()) {
            throw new Error('A hirdet√©s c√≠me k√∂telez≈ë!');
        }
        
        if (!sellerName || !sellerName.trim()) {
            throw new Error('Az elad√≥ neve k√∂telez≈ë!');
        }
        
        console.log('Hirdet√©s k√ºld√©se...');
        
        // K√©r√©s k√ºld√©se a szerverre
        const response = await fetch('/api/ads', {
            method: 'POST',
            body: formData
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || `HTTP hiba: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('Sikeres v√°lasz:', result);
        
        // Sikeres √ºzenet megjelen√≠t√©se
        showSuccess('‚úÖ Hirdet√©s sikeresen feladva!');
        
        // ≈∞rlap ki√ºr√≠t√©se
        adForm.reset();
        
        // Hirdet√©sek √∫jrat√∂lt√©se
        await loadAds();
        
    } catch (error) {
        console.error('Hiba a hirdet√©s felad√°sakor:', error);
        showError(error.message);
    } finally {
        // Gomb vissza√°ll√≠t√°sa
        submitBtn.disabled = false;
        submitBtn.textContent = 'üöÄ Hirdet√©s felad√°sa';
    }
});

// F√°jl kiv√°laszt√°s esem√©nykezel≈ë (el≈ën√©zet √©s valid√°ci√≥)
const imageInput = document.getElementById('image');
imageInput.addEventListener('change', (e) => {
    const file = e.target.files[0];
    
    if (file) {
        // F√°jlm√©ret ellen≈ërz√©se (10MB max)
        const maxSize = 10 * 1024 * 1024; // 10MB
        if (file.size > maxSize) {
            showError('A kiv√°lasztott f√°jl t√∫l nagy! Maximum 10MB m√©ret≈± f√°jl t√∂lthet≈ë fel.');
            imageInput.value = '';
            return;
        }
        
        // F√°jlt√≠pus ellen≈ërz√©se
        if (!file.type.startsWith('image/')) {
            showError('Csak k√©pf√°jlok t√∂lthet≈ëk fel!');
            imageInput.value = '';
            return;
        }
        
        console.log('Kiv√°lasztott k√©p:', file.name, 'M√©ret:', (file.size / 1024 / 1024).toFixed(2) + 'MB');
    }
});

// Alkalmaz√°s inicializ√°l√°sa
document.addEventListener('DOMContentLoaded', () => {
    console.log('Mini Apr√≥hirdet≈ë alkalmaz√°s inicializ√°l√°sa...');
    
    // Hirdet√©sek bet√∂lt√©se az oldal bet√∂lt√©sekor
    loadAds();
    
    console.log('Alkalmaz√°s sikeresen inicializ√°lva!');
});

// === CRUD FUNKCI√ìK ===

// Hirdet√©s szerkeszt√©se
async function editAd(adId) {
    try {
        console.log('Hirdet√©s bet√∂lt√©se szerkeszt√©shez:', adId);
        
        // Hirdet√©s adatainak lek√©r√©se
        const response = await fetch(`/api/ads/${adId}`);
        
        if (!response.ok) {
            throw new Error(`Nem siker√ºlt bet√∂lteni a hirdet√©st: ${response.status}`);
        }
        
        const ad = await response.json();
        console.log('Bet√∂lt√∂tt hirdet√©s:', ad);
        
        // Modal megnyit√°sa √©s mez≈ëk kit√∂lt√©se
        openEditModal(ad);
        
    } catch (error) {
        console.error('Hiba a hirdet√©s bet√∂lt√©sekor:', error);
        showError(`Hiba t√∂rt√©nt a hirdet√©s bet√∂lt√©sekor: ${error.message}`);
    }
}

// Szerkeszt≈ë modal megnyit√°sa
function openEditModal(ad) {
    const modal = document.getElementById('edit-modal');
    const form = document.getElementById('edit-form');
    
    // Mez≈ëk kit√∂lt√©se
    document.getElementById('edit-ad-id').value = ad.id;
    document.getElementById('edit-ad_title').value = ad.ad_title || '';
    document.getElementById('edit-seller_name').value = ad.seller_name || '';
    document.getElementById('edit-price').value = ad.price || '';
    document.getElementById('edit-email').value = ad.email || '';
    document.getElementById('edit-phone').value = ad.phone || '';
    document.getElementById('edit-ad_text').value = ad.ad_text || '';
    
    // Hiba√ºzenetek elrejt√©se
    document.getElementById('edit-error-message').style.display = 'none';
    document.getElementById('edit-success-message').style.display = 'none';
    
    // Modal megjelen√≠t√©se
    modal.classList.add('show');
    document.body.style.overflow = 'hidden'; // H√°tt√©r scroll letilt√°sa
}

// Szerkeszt≈ë modal bez√°r√°sa
function closeEditModal() {
    const modal = document.getElementById('edit-modal');
    modal.classList.remove('show');
    document.body.style.overflow = 'auto'; // H√°tt√©r scroll vissza√°ll√≠t√°sa
    
    // Form resetel√©se
    document.getElementById('edit-form').reset();
}

// Hirdet√©s t√∂rl√©se
async function deleteAd(adId, adTitle) {
    // Meger≈ës√≠t≈ë dial√≥gus
    const confirmed = confirm(`Biztosan t√∂r√∂lni szeretn√© a k√∂vetkez≈ë hirdet√©st?\n\n"${adTitle}"\n\nEz a m≈±velet nem vonhat√≥ vissza!`);
    
    if (!confirmed) {
        return; // Felhaszn√°l√≥ lemondta
    }
    
    try {
        console.log('Hirdet√©s t√∂rl√©se:', adId);
        
        const response = await fetch(`/api/ads/${adId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || `HTTP hiba: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('T√∂rl√©s sikeres:', result);
        
        // Sikeres √ºzenet megjelen√≠t√©se
        showSuccess('‚úÖ Hirdet√©s sikeresen t√∂r√∂lve!');
        
        // Hirdet√©sek √∫jrat√∂lt√©se
        await loadAds();
        
    } catch (error) {
        console.error('Hiba a hirdet√©s t√∂rl√©sekor:', error);
        showError(`Hiba t√∂rt√©nt a t√∂rl√©s sor√°n: ${error.message}`);
    }
}

// === MODAL FORM ESEM√âNYKEZEL≈êK ===

// Szerkeszt≈ë form submit esem√©nykezel≈ë  
document.getElementById('edit-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
        const submitBtn = document.getElementById('edit-submit-btn');
        const errorDiv = document.getElementById('edit-error-message');
        const successDiv = document.getElementById('edit-success-message');
        
        // Gomb letilt√°sa √©s bet√∂lt≈ë √°llapot
        submitBtn.disabled = true;
        submitBtn.textContent = '‚è≥ Ment√©s...';
        
        // Hiba√ºzenetek elrejt√©se
        errorDiv.style.display = 'none';
        successDiv.style.display = 'none';
        
        // FormData objektum l√©trehoz√°sa
        const formData = new FormData(e.target);
        const adId = formData.get('ad_id');
        
        // K√∂telez≈ë mez≈ëk ellen≈ërz√©se
        const adTitle = formData.get('ad_title');
        const sellerName = formData.get('seller_name');
        
        if (!adTitle || !adTitle.trim()) {
            throw new Error('A hirdet√©s c√≠me k√∂telez≈ë!');
        }
        
        if (!sellerName || !sellerName.trim()) {
            throw new Error('Az elad√≥ neve k√∂telez≈ë!');
        }
        
        console.log('Hirdet√©s friss√≠t√©se:', adId);
        
        // K√©r√©s k√ºld√©se a szerverre
        const response = await fetch(`/api/ads/${adId}`, {
            method: 'PUT',
            body: formData
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || `HTTP hiba: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('Friss√≠t√©s sikeres:', result);
        
        // Sikeres √ºzenet megjelen√≠t√©se
        successDiv.textContent = '‚úÖ Hirdet√©s sikeresen friss√≠tve!';
        successDiv.style.display = 'block';
        
        // Modal bez√°r√°sa kis k√©sleltet√©ssel
        setTimeout(() => {
            closeEditModal();
            showSuccess('‚úÖ Hirdet√©s sikeresen friss√≠tve!');
        }, 1500);
        
        // Hirdet√©sek √∫jrat√∂lt√©se
        await loadAds();
        
    } catch (error) {
        console.error('Hiba a hirdet√©s friss√≠t√©sekor:', error);
        
        const errorDiv = document.getElementById('edit-error-message');
        errorDiv.textContent = error.message;
        errorDiv.style.display = 'block';
    } finally {
        // Gomb vissza√°ll√≠t√°sa
        const submitBtn = document.getElementById('edit-submit-btn');
        submitBtn.disabled = false;
        submitBtn.textContent = 'üíæ Ment√©s';
    }
});

// Modal bez√°r√°sa ESC billenty≈±vel
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        closeEditModal();
    }
});

// Modal bez√°r√°sa h√°tt√©rre kattint√°ssal
document.getElementById('edit-modal').addEventListener('click', (e) => {
    if (e.target.classList.contains('modal')) {
        closeEditModal();
    }
});

// Service Worker regisztr√°l√°sa (opcion√°lis, offline funkci√≥khoz)
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        // Szolg√°ltat√°s munk√°s regisztr√°l√°sa k√©s≈ëbb implement√°lhat√≥
        console.log('Service Worker t√°mogat√°s √©rhet≈ë el');
    });
}
