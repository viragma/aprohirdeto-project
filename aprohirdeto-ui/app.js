// API konfigur√°ci√≥
const API_BASE_URL = 'http://beadando-lb-555305300.eu-central-1.elb.amazonaws.com';

console.log('üêñ FALUSI PORT√âKA PIAC - JavaScript bet√∂ltve!');

// DOM elemek
const adForm = document.getElementById('ad-form');
const gallery = document.getElementById('gallery');
const submitBtn = document.getElementById('submit-btn');
const errorMessage = document.getElementById('error-message');
const successMessage = document.getElementById('success-message');

// Debug inform√°ci√≥k
console.log('DOM elemek:', {
    adForm: !!adForm,
    gallery: !!gallery,
    submitBtn: !!submitBtn,
    errorMessage: !!errorMessage,
    successMessage: !!successMessage
});

// Hiba√ºzenet megjelen√≠t√©se
function showError(message) {
    console.error('HIBA:', message);
    if (errorMessage) {
        errorMessage.textContent = `üêñ Jaj de bosszant√≥! ${message}`;
        errorMessage.style.display = 'block';
        if (successMessage) successMessage.style.display = 'none';
        
        setTimeout(() => {
            errorMessage.style.display = 'none';
        }, 6000);
    }
}

// Sikeres √ºzenet megjelen√≠t√©se
function showSuccess(message) {
    console.log('SIKER:', message);
    if (successMessage) {
        successMessage.textContent = `üåæ H√°t ez azt√°n remek, √∂regem! ${message}`;
        successMessage.style.display = 'block';
        if (errorMessage) errorMessage.style.display = 'none';
        
        setTimeout(() => {
            successMessage.style.display = 'none';
        }, 4000);
    }
}

// Hirdet√©sek bet√∂lt√©se - egyszer≈± √©s m≈±k√∂d≈ë verzi√≥
async function loadAds() {
    console.log('üêÑ Hirdet√©sek bet√∂lt√©se kezd≈ëdik...');
    
    if (!gallery) {
        console.error('Gallery elem nem tal√°lhat√≥!');
        return;
    }
    
    try {
        // Bet√∂lt≈ë √ºzenet
        gallery.innerHTML = '<div class="loading">üêÑ V√°rj csak, √∂regem, √∂sszeszedj√ºk a holmikat...</div>';
        
        console.log('API h√≠v√°s ind√≠t√°sa:', `${API_BASE_URL}/api/ads`);
        
        const response = await fetch(`${API_BASE_URL}/api/ads`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache'
            },
            mode: 'cors'
        });
        
        console.log('API v√°lasz st√°tusz:', response.status);
        console.log('API v√°lasz headers:', [...response.headers.entries()]);
        
        if (!response.ok) {
            throw new Error(`HTTP szar hiba: ${response.status} - ${response.statusText}`);
        }
        
        const responseText = await response.text();
        console.log('Nyers API v√°lasz:', responseText.substring(0, 500) + '...');
        
        let ads;
        try {
            ads = JSON.parse(responseText);
        } catch (parseError) {
            console.error('JSON parse hiba:', parseError);
            throw new Error('A szerver szar v√°laszt k√ºld√∂tt (nem JSON)');
        }
        
        console.log('Parsed ads:', ads);
        console.log('Ads t√≠pusa:', typeof ads);
        console.log('Ads array?', Array.isArray(ads));
        console.log('Ads hossza:', ads ? ads.length : 'undefined');
        
        renderAds(ads);
        
    } catch (error) {
        console.error('SZ√ñRNY≈∞ HIBA a hirdet√©sek bet√∂lt√©sekor:', error);
        
        if (gallery) {
            gallery.innerHTML = `
                <div class="no-ads">
                    üêÑ Ejnye-bejnye! Nem tudjuk bet√∂lteni a port√©k√°kat!<br>
                    Hiba: ${error.message}<br>
                    <small>Pr√≥b√°ld √∫jra, kom√°m!</small>
                </div>
            `;
        }
        
        showError(`Nem tudtuk √∂sszeszedni a holmikat: ${error.message}`);
    }
}

// Hirdet√©sek megjelen√≠t√©se - robusztus verzi√≥
function renderAds(ads) {
    console.log('üè™ Hirdet√©sek renderel√©se kezd≈ëdik...');
    console.log('Render ads param:', ads);
    
    if (!gallery) {
        console.error('Gallery elem hi√°nyzik a renderel√©shez!');
        return;
    }
    
    if (!ads) {
        console.warn('Ads param null vagy undefined');
        gallery.innerHTML = `
            <div class="no-ads">
                üåæ Nincs adat a szerverr≈ël, kom√°m!
            </div>
        `;
        return;
    }
    
    if (!Array.isArray(ads)) {
        console.warn('Ads nem array:', typeof ads);
        gallery.innerHTML = `
            <div class="no-ads">
                üêñ A szerver furcsa adatot k√ºld√∂tt (nem lista)!
            </div>
        `;
        return;
    }
    
    if (ads.length === 0) {
        console.log('√úres ads array');
        gallery.innerHTML = `
            <div class="no-ads">
                üåæ M√©g senki sem k√≠n√°l port√©k√°t! Te lehetsz az els≈ë tanyasi!
            </div>
        `;
        return;
    }
    
    console.log(`Renderel√©s: ${ads.length} hirdet√©s`);
    
    try {
        const adsHtml = ads.map((ad, index) => {
            console.log(`Hirdet√©s ${index}:`, ad);
            
            let imageHtml = '';
            
            // K√©p kezel√©se
            if (ad.image_url) {
                try {
                    const imageUrl = ad.image_url.startsWith('http') 
                        ? ad.image_url 
                        : `https://beadando-kepek-w4pp9o.s3.eu-central-1.amazonaws.com/${ad.image_url}`;
                    
                    imageHtml = `
                        <img src="${imageUrl}" 
                             alt="${escapeHtml(ad.ad_title || 'Szar k√©p')}" 
                             onerror="this.style.display='none'; console.log('K√©p bet√∂lt√©si hiba: ${imageUrl}');"
                             onload="console.log('K√©p sikeresen bet√∂ltve: ${imageUrl}');">
                    `;
                } catch (imgError) {
                    console.warn('K√©p URL hiba:', imgError);
                }
            }
            
            return `
                <div class="ad-card">
                    ${imageHtml}
                    <h3>üåæ ${escapeHtml(ad.ad_title || 'N√©vtelen port√©ka')}</h3>
                    ${ad.price ? `<p class="price">üí∞ ${escapeHtml(ad.price)}</p>` : ''}
                    <p><strong>ü§† Tanyasi neve:</strong> ${escapeHtml(ad.seller_name || 'Ismeretlen gazda')}</p>
                    ${ad.ad_text ? `<p><strong>üìù Micsoda ez:</strong> ${escapeHtml(ad.ad_text)}</p>` : ''}
                    ${ad.email ? `<p><strong>üìß Elektronikus lev√©l:</strong> ${escapeHtml(ad.email)}</p>` : ''}
                    ${ad.phone ? `<p><strong>üìû Telefonos el√©r√©s:</strong> ${escapeHtml(ad.phone)}</p>` : ''}
                    <p><small>üïê Felt√©ve: ${ad.created_at ? new Date(ad.created_at).toLocaleString('hu-HU') : 'Ismeretlen id≈ëben'}</small></p>
                </div>
            `;
        }).join('');
        
        console.log('HTML gener√°lva, hossza:', adsHtml.length);
        
        gallery.innerHTML = adsHtml;
        
        console.log('‚úÖ Hirdet√©sek sikeresen megjelen√≠tve!');
        
        // Ellen≈ërz√©s
        const renderedCards = gallery.querySelectorAll('.ad-card');
        console.log(`Renderelt k√°rty√°k sz√°ma: ${renderedCards.length}`);
        
    } catch (renderError) {
        console.error('Renderel√©si hiba:', renderError);
        gallery.innerHTML = `
            <div class="no-ads">
                üêñ Sz√∂rny≈± hiba a megjelen√≠t√©skor!<br>
                ${renderError.message}
            </div>
        `;
    }
}

// HTML escape - biztons√°g
function escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text.toString();
    return div.innerHTML;
}

// ≈∞rlap submit esem√©nykezel≈ë
if (adForm) {
    adForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        console.log('üêñ ≈∞rlap elk√ºld√©se...');
        
        try {
        // Gomb letilt√°sa
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.textContent = 'üêÑ Felrakjuk a port√©k√°dat...';
        }            // √úzenetek elrejt√©se
            if (errorMessage) errorMessage.style.display = 'none';
            if (successMessage) successMessage.style.display = 'none';
            
            const formData = new FormData(adForm);
            
            // Debug: FormData tartalom
            console.log('FormData tartalom:');
            for (let [key, value] of formData.entries()) {
                if (value instanceof File) {
                    console.log(`${key}: File(${value.name}, ${value.size} bytes)`);
                } else {
                    console.log(`${key}: ${value}`);
                }
            }
            
            // K√∂telez≈ë mez≈ëk ellen≈ërz√©se
            const adTitle = formData.get('ad_title');
            const sellerName = formData.get('seller_name');
            
            if (!adTitle || !adTitle.trim()) {
                throw new Error('√çrd m√°r be, mifajta port√©k√°t akarsz k√≠n√°lni, √∂regem!');
            }
            
            if (!sellerName || !sellerName.trim()) {
                throw new Error('Add meg a nevedet, kom√°m!');
            }
            
            console.log('API POST k√©r√©s ind√≠t√°sa...');
            
            const response = await fetch(`${API_BASE_URL}/api/ads`, {
                method: 'POST',
                body: formData,
                mode: 'cors'
            });
            
            console.log('POST v√°lasz st√°tusz:', response.status);
            
            if (!response.ok) {
                let errorMsg = `HTTP hiba: ${response.status}`;
                try {
                    const errorData = await response.json();
                    errorMsg = errorData.message || errorMsg;
                } catch (e) {
                    console.warn('Nem JSON error response');
                }
                throw new Error(errorMsg);
            }
            
            const result = await response.json();
            console.log('Sikeres hirdet√©s felad√°s:', result);
            
            showSuccess('A port√©k√°dat sikeresen felraktuk! Most m√°r l√°thatj√°k a t√∂bbi tanyasiak is!');
            
            // ≈∞rlap ki√ºr√≠t√©se
            adForm.reset();
            
            // Hirdet√©sek √∫jrat√∂lt√©se
            setTimeout(() => {
                loadAds();
            }, 1000);
            
        } catch (error) {
            console.error('Hirdet√©s felad√°si hiba:', error);
            showError(error.message);
        } finally {
            // Gomb vissza√°ll√≠t√°sa
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.textContent = 'üêñ Fel a port√©k√°val!';
            }
        }
    });
} else {
    console.error('adForm elem nem tal√°lhat√≥!');
}

// F√°jl valid√°ci√≥
const imageInput = document.getElementById('image');
if (imageInput) {
    imageInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        
        if (file) {
            console.log('F√°jl kiv√°lasztva:', file.name, file.size, file.type);
            
            const maxSize = 5 * 1024 * 1024; // 5MB
            if (file.size > maxSize) {
                showError('Ez a f√©nyk√©p t√∫l nagy! Maximum 5MB lehet, √∂regem!');
                imageInput.value = '';
                return;
            }
            
            if (!file.type.startsWith('image/')) {
                showError('Csak f√©nyk√©pet t√∂lts fel, kom√°m!');
                imageInput.value = '';
                return;
            }
            
            console.log('‚úÖ F√°jl rendben');
        }
    });
} else {
    console.warn('Image input nem tal√°lhat√≥');
}

// Alkalmaz√°s inicializ√°l√°sa
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üêñ FALUSI PORT√âKA PIAC inicializ√°l√°sa...');
    console.log('DOM bet√∂ltve, API URL:', API_BASE_URL);
    
    // Kis v√°rakoz√°s a DOM elemek biztos√≠t√°sa √©rdek√©ben
    setTimeout(async () => {
        await loadAds();
        console.log('üåæ K√©sz, most m√°r lehet k√≠n√°lni a port√©k√°kat!');
    }, 100);
});

// Error handling a window szinten
window.addEventListener('error', (e) => {
    console.error('Glob√°lis JavaScript hiba:', e.error);
});

window.addEventListener('unhandledrejection', (e) => {
    console.error('Unhandled Promise rejection:', e.reason);
});

console.log('üåæ JavaScript f√°jl v√©g√©re √©rt√ºnk!');
